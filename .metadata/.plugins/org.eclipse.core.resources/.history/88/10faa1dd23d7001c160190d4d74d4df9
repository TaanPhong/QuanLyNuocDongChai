package ptithcm.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.support.PagedListHolder;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import ptithcm.entity.DonDH;
import ptithcm.entity.Hang;
import ptithcm.entity.Loai;
import ptithcm.entity.SanPham;

@Controller
@RequestMapping("QuanLy/")
@Transactional
public class AdminController {
	@Autowired
	SessionFactory factory;

	@RequestMapping("TrangChu")
	public String TrangChu(ModelMap model) {
		Session session = factory.getCurrentSession();
		String hql = "select DDH.MADDH, HO + ' ' + TEN as HOTEN, DDH.SDTNGUOINHAN, DDH.NGAYDAT from KhachHang KH, DonDH DDH\r\n"
				+ "where KH.MAKH = DDH.khachHang.MAKH";
		Query query = session.createQuery(hql);
		List<Object[]> list = query.list();
		model.addAttribute("donDHs", list);

		hql = "select KH.HO + ' ' + KH.TEN as HOTEN, KH.SDT from KhachHang KH, DonDH DDH "
				+ "where KH.MAKH = DDH.khachHang.MAKH order by DDH.NGAYDAT DESC";
		query = session.createQuery(hql);
		List<Object[]> list1 = query.list();
		model.addAttribute("khanhHangDats", list1);

		hql = "select sum(SP.GIA * CT.SL) from HoaDon HD, SanPham SP, CTHD CT\r\n"
				+ "where HD.MAHD = CT.hoaDon.MAHD\r\n" + "and SP.MASP = CT.sanPham.MASP\r\n";
		query = session.createQuery(hql);
		long tongTien = (long) query.uniqueResult();
		model.addAttribute("tongTien", tongTien);

		hql = "select count(*) from HoaDon";
		query = session.createQuery(hql);
		long soDonHang = (long) query.uniqueResult();
		model.addAttribute("soDonHang", soDonHang);

		hql = "select count(*) from SanPham";
		query = session.createQuery(hql);
		long soSanPham = (long) query.uniqueResult();
		model.addAttribute("soSanPham", soSanPham);

		hql = "select count(*) from KhachHang";
		query = session.createQuery(hql);
		long soKhachHang = (long) query.uniqueResult();
		model.addAttribute("soKhachHang", soKhachHang);
		return "QuanLy/TrangChu";
	}

	@RequestMapping("SanPham")
	public String SanPham(HttpServletRequest request, ModelMap model) {
		List<Object[]> listSP = getSanPhams();
		PagedListHolder pagedListHolder = new PagedListHolder(listSP);
		int page = ServletRequestUtils.getIntParameter(request, "p", 0);
		pagedListHolder.setPage(page);
		// SỐ page
		pagedListHolder.setMaxLinkedPages(5);
		// Số dòng
		pagedListHolder.setPageSize(10);
		// model.addAttribute("btnStatus", "btnAdd");
		model.addAttribute("pagedListHolder", pagedListHolder);
		return "QuanLy/SanPham";
	}

	@RequestMapping("NhanVien")
	public String NhanVien(ModelMap model) {
		return "QuanLy/NhanVien";
	}

	@RequestMapping("NhapKho")
	public String NhapKho(ModelMap model) {
		return "QuanLy/NhapKho";
	}

	@RequestMapping("LoiNhuan")
	public String LoiNhuan(ModelMap model) {

		return "QuanLy/LoiNhuan";
	}

	@RequestMapping("KhachHang")
	public String KhachHang(ModelMap model) {
		return "QuanLy/KhachHang";
	}

	@RequestMapping("DoanhSo")
	public String DoanhSo(ModelMap model) {
		return "QuanLy/DoanhSo";
	}

	@RequestMapping("TonKho")
	public String TonKho(ModelMap model) {
		return "QuanLy/TonKho";
	}

//	@ModelAttribute("hangsSel")
	public List<Hang> getListHang() {
		Session session = factory.getCurrentSession();
		String hql = "from Hang";
		Query query = session.createQuery(hql);
		List<Hang> list = query.list();
		return list;
	}

	public List<Loai> getLoai() {
		Session session = factory.getCurrentSession();
		String hql = "from Loai";
		Query query = session.createQuery(hql);
		List<Loai> list = query.list();
		return list;
	}

	public List<DonDH> getDonDH() {
		Session session = factory.getCurrentSession();
		String hql = "From DonDH order by NGAYDAT DESC";
		Query query = session.createQuery(hql);
		List<DonDH> list = query.list();
		return list;
	}

	// ====================================================== Sản Phẩm
	// =======================================//
	public List<Object[]> getSanPhams() {
		Session session = factory.getCurrentSession();
		String hql = "select SP.MASP, SP.TENSP, L.TENLOAI, H.TENHANG, SP.SLTON, SP.GIA\r\n"
				+ "from SanPham SP, Hang H, Loai L\r\n" + "where SP.loai.MALOAI  = L.MALOAI\r\n"
				+ "and SP.hang.MAHANG = H.MAHANG";

		Query query = session.createQuery(hql);
		List<Object[]> list = query.list();
		return list;
	}

	public SanPham getSanPham(Integer id) {
		Session session = factory.getCurrentSession();
		String hql = "FROM SanPham where MASP = :id";
		Query query = session.createQuery(hql);
		query.setParameter("id", id);
		SanPham list = (SanPham) query.list().get(0);
		return list;
	}

	public Integer ThemSanPham(SanPham sp) {
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();
		try {
			session.save(sp);
			t.commit();
		} catch (Exception e) {
			// TODO: handle exception
			t.rollback();
			return 0;
		} finally {
			session.close();
		}
		return 1;
	}

	public Integer XoaSanPham(SanPham sp) {
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();

		try {
			session.delete(sp);
			t.commit();
		} catch (Exception e) {
			t.rollback();
			return 0;
		} finally {
			session.close();
		}
		return 1;
	}

	// ================ Thêm =====================//
	@RequestMapping(value = "ThemSanPham", method = RequestMethod.GET)
	public String ThemSanPham(ModelMap model) {
		model.addAttribute("sanPham", new SanPham());
		model.addAttribute("hangsSel", this.getListHang());
		model.addAttribute("loaisSel", this.getLoai());
		model.addAttribute("btnStatus", "btnAdd");
		return "QuanLy/NhapSanPham";
	}


	@RequestMapping(value = "NhapSanPham",  method = RequestMethod.POST)
	public String themSanPham(HttpServletRequest request, ModelMap model, @ModelAttribute("sanPham") SanPham sanPham) {
	//	sanPham.setGIA(0);
		sanPham.setSLTON(0);
		Integer temp = this.ThemSanPham(sanPham);
		if (temp != 0) {
			model.addAttribute("message", "Thêm thành công");
		} else {
			model.addAttribute("message", "Thêm thất bại!");
		}

		List<Object[]> listSP = getSanPhams();
		PagedListHolder pagedListHolder = new PagedListHolder(listSP);
		int page = ServletRequestUtils.getIntParameter(request, "p", 0);
		pagedListHolder.setPage(page);
		pagedListHolder.setMaxLinkedPages(5);

		pagedListHolder.setPageSize(10);
		model.addAttribute("pagedListHolder", pagedListHolder);
		System.out.println(pagedListHolder);
		// model.addAttribute("products", this.getProducts());

		return "QuanLy/SanPham";
	}

	// ============================ Sửa ==============================//
	public Integer SuaSanPham(SanPham sp) {
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();

		try {
			session.update(sp);
			t.commit();
		} catch (Exception e) {
			t.rollback();
			return 0;
		} finally {
			session.close();
		}
		return 1;
	}

	@RequestMapping(value = "SanPham/{id}.htm", method = RequestMethod.GET)
	public String SuaSanPham(ModelMap model, @PathVariable("id") Integer id) {
		System.out.println("Vô rồi");
		model.addAttribute("sanPham", this.getSanPham(id));
		
		model.addAttribute("hangsSel", this.getListHang());
		model.addAttribute("loaisSel", this.getLoai());
		model.addAttribute("btnStatus", "linkEdit");
		return "QuanLy/NhapSanPham";
	}

	@RequestMapping(value = "NhapSanPham", params = "linkEdit",method = RequestMethod.POST)
	public String HieuChinhSanPham(HttpServletRequest request, ModelMap model,
			@ModelAttribute("sanPham") SanPham sanPham, @RequestParam(value = "id", required = false) Integer id ) {
		System.err.println(sanPham);
		SanPham tmp = this.getSanPham(id);
		sanPham.setMASP(tmp.getMASP());
		sanPham.setSLTON(tmp.getSLTON());
		Integer temp = this.SuaSanPham(sanPham);
		if (temp != 0) {
			model.addAttribute("message", "Sửa  thành công");
		} else {
			model.addAttribute("message", "sửa thất bại!");
		}

		List<Object[]> listSP = getSanPhams();
		PagedListHolder pagedListHolder = new PagedListHolder(listSP);
		int page = ServletRequestUtils.getIntParameter(request, "p", 0);
		pagedListHolder.setPage(page);
		pagedListHolder.setMaxLinkedPages(5);

		pagedListHolder.setPageSize(10);
		model.addAttribute("pagedListHolder", pagedListHolder);
		// model.addAttribute("products", this.getProducts());
		return "redirect:/QuanLy/SanPham.htm";
	}
}
